{
    "raw": [
        {
            "CYPERX": "Welcome MC DESMOND?"
        },
        {
            "USER": "/automatic; add, commit and push , cd into my repo directory: C:\\Users\\MC DESMOND\\dextop\\Gradify"
        },
        {
            "SYSTEM": "<GIT_DIFF>diff --git a/__pycache__/gradientTk.cpython-312.pyc b/__pycache__/gradientTk.cpython-312.pyc\nindex 0422679..2b64bc7 100644\nBinary files a/__pycache__/gradientTk.cpython-312.pyc and b/__pycache__/gradientTk.cpython-312.pyc differ\ndiff --git a/gradientTk.py b/gradientTk.py\nindex 253f5d1..4984590 100644\n--- a/gradientTk.py\n+++ b/gradientTk.py\n@@ -138,10 +138,8 @@ To reconfigure the coordinates\n         \n         lengthColorList = 0\n         try:\n-            print(self.__colorList)\n             lengthColorList = list(enumerate(self.__colorList))[::-1][0][0]\n         except:pass\n-        print(lengthColorList)\n         if coords.__len__() <=2:\n             coords = [jj+lengthColorList for jj in coords]\n         else:\ndiff --git a/gradify.py b/gradify.py\nindex bdb0d39..4f9d0c5 100644\n--- a/gradify.py\n+++ b/gradify.py\n@@ -344,6 +344,12 @@ AllColors = {'aliceblue': [240, 248, 255],\n  'yellowsunshine': [255, 247, 0]}\n \n \n+class GradifyColorError(Exception):...\n+class GradifyColorListLengthError(Exception):...\n+class GradifyColorCodeError(Exception):...\n+class GradifyInvalidColorError(ValueError):...\n+class GradifyValueError(ValueError):...\n+\n def MiddlePoint(coordinates):\n   \"\"\"\n   Calculates the middle point of a line represented by a list of coordinates.\n@@ -467,9 +473,9 @@ Using color names\n         elif len(rgb) == 3:\n             r, g, b = rgb[0] * 2, rgb[1] * 2, rgb[2] * 2\n         else:\n-            raise ValueError()\n+            raise GradifyValueError()\n     except:\n-        raise ValueError(\"Invalid value %r provided for rgb color.\"\n+        raise GradifyValueError(\"Invalid value %r provided for rgb color.\"\n                         % str_rgb)\n     return tuple([int(int(v, 16)) for v in (r, g, b)])\n \n@@ -520,7 +526,6 @@ Generate coordinates of a line using an `angle` `OriginPoint` and `length`\n \n \n class Gradient:\n-\n     def __init__(self,colors=[],mode:Literal['rgb','hex']=None) -> None:\n         \"\"\" \n Generate a list of colors of either rgb or hex \n@@ -677,7 +682,55 @@ Generate a list of `lengthOfList` colors\n         \n         return grad\n \n+    def PercentMMG(self,length:int,list2d:list):\n+        grad = []\n+        percent = []\n+        colors = []\n+        numofcolor = list2d.__len__()\n+        for i in list2d:\n+            if percent.__len__() > 0:\n+                t = 0 \n+                for p in percent:\n+                    t += abs(p)\n+                if t+i[1] <= 100:\n+                    percent.append(i[1])\n+                else:\n+                    percent.append(100 - t)\n+            else:\n+                percent.append(i[1])\n+            \n+            colors.append(i[0])\n+        t = 0\n+        for p in percent:\n+            t += abs(p)\n+        if t < 100:\n+            percent = percent[::-1]\n+            percent[0] += (100 - t)\n+            percent = percent[::-1]\n+        List = [self.MindMultiGradient(2,[colors[0],colors[0]])[0]]\n+        for index,obj in enumerate(percent):\n+            plength = math.floor((obj/100)*length)\n+            div = int(plength/int(obj/10))\n+            print(\"length \",plength)\n+            print(\"index \",index)\n+            print(\"div \",div)\n+            print(\"obj \",obj)\n+            print(\"percent \",percent)\n+            if index == list(enumerate(percent))[::-1][0][0] :\n+                List = self.MindMultiGradient(plength-div,[List[::-1][0],List[::-1][0]])\n+                List.extend(self.MindMultiGradient(div,[List[::-1][0],colors[index]]))\n+\n+                print(\"last111 \",List[::-1][0])\n+            else:\n+                List = self.MindMultiGradient(plength-div,[List[::-1][0],List[::-1][0]])\n+                List.extend(self.MindMultiGradient(div,[List[::-1][0],colors[index+1]]))\n+                print(\"last \",List[::-1][0])\n \n+            # List = self.MindMultiGradient(plength,[List[0],List[::-1][int(plength/2)]])\n+            # grad.append(\"cyan\")\n+            grad.extend(List)\n+        \n+        return grad\n \n     def DoubleReveredMergedMindMultiGradient(self,lengthOfList ,COLORS) -> list:\n         \"\"\" \n@@ -701,8 +754,8 @@ The returned list is extended with a revered version of it self\n         return spread\n     \n \n-\n-    def rgbFIYhexList(self ,HEXlist)-> list[tuple]:\n+    @staticmethod\n+    def rgbFIYhexList(HEXlist)-> list[tuple]:\n         \"\"\" Convert a hex list to an rgb list\"\"\"\n         try:\n             fil = [hex2rgb(i) for i in HEXlist]\n@@ -711,8 +764,8 @@ The returned list is extended with a revered version of it self\n         return fil\n     \n \n-    \n-    def hexFIYrgbList(self ,RGBlist) -> list[str]:\n+    @staticmethod\n+    def hexFIYrgbList(RGBlist) -> list[str]:\n         \"\"\" Convert a rgb list to a hex list\"\"\"\n         try:\n             fil = [rgb2hex(i) for i in fil]\n@@ -721,9 +774,37 @@ The returned list is extended with a revered version of it self\n         return fil\n \n \n+# def create_rounded_rectangle(canvas, x1, y1, x2, y2, radius=25, **kwargs):\n+#     points = [x1+radius, y1,\n+#               x1+radius, y1,\n+#               x2-radius, y1,\n+#               x2-radius, y1,\n+#               x2, y1,\n+#               x2, y1+radius,\n+#               x2, y1+radius,\n+#               x2, y2-radius,\n+#               x2, y2-radius,\n+#               x2, y2,\n+#               x2-radius, y2,\n+#               x2-radius, y2,\n+#               x1+radius, y2,\n+#               x1+radius, y2,\n+#               x1, y2,\n+#               x1, y2-radius,\n+#               x1, y2-radius,\n+#               x1, y1+radius,\n+#               x1, y1+radius,\n+#               x1, y1]\n+\n+#     return canvas.create_polygon(points, **kwargs, smooth=True)\n+\n+\n+\n \n def Example():  \n     grad = Gradient() \n+    pli = grad.PercentMMG(1000,[[\"cyan\",20],[\"black\",60],[\"#007946\",10],[\"red\",10]])\n+    # print(pli)\n     root = Tk(screenName='GRADIENT')\n     root.geometry('500x500')\n     root.update()\n@@ -735,13 +816,15 @@ def Example():\n     geo = lambda : (int(root.winfo_width()),int(root.winfo_height()))\n     canvas = Canvas(root,width=geo()[0],height=geo()[1],bg='#021316',highlightthickness=0)\n     canvas.pack(expand=True,fill=BOTH)\n+\n     # root.attributes('-transparentcolor',canvas['bg'])\n     grad(('black','cyan','blue','black'))\n     print(canvas['width'])\n     print(canvas['height'])\n     ackeys = list(AllColors.keys())\n     ackeys.remove('black')\n-    \n+    for i,o in enumerate(pli):\n+        canvas.create_line(i,0,i,1000,fill=o)\n \n     obj = GradientCircle(coords=(100,100),\n                         radius=10,\n@@ -780,7 +863,7 @@ def Example():\n \n if __name__ == '__main__':\n     from tkinter import Canvas,Tk,BOTH\n-    try:\n-        from gradientTk import GradientCircle\n-        Example()\n-    except Exception as e: print(e)\n\\ No newline at end of file\n+    # try:\n+    from gradientTk import GradientCircle\n+    Example()\n+    # except Exception as e: print(e)\n\\ No newline at end of file\ndiff --git a/test.py b/test.py\nindex e69de29..5de7850 100644\n--- a/test.py\n+++ b/test.py\n@@ -0,0 +1,51 @@\n+import pyautogui as py\n+import tkinter as tk\n+import time \n+import colour\n+root = tk.Tk()\n+root.geometry('500x300')\n+root.attributes('-topmost',1)\n+root.attributes('-toolwindow',1)\n+# py.moveTo(int(root.winfo_screenwidth())/2,int(root.winfo_screenheight())/2) \n+font = ('courier',30)\n+labelhex = tk.Label(root,text='hex',font = font,bg='#062e32',fg='white')\n+labelrgb = tk.Label(root,text='rgb',font = font,bg='#062e32',fg='white')\n+labelhex.pack(expand=True,fill='x')\n+labelrgb.pack(expand=True,fill='x')\n+\n+while True:\n+    root.update()\n+    pos = py.position()\n+    rgb = py.pixel(pos.x,pos.y)\n+    Hex = colour.rgb2hex((i/255 for i in rgb))\n+    labelhex.config(text=Hex)\n+    labelrgb.config(text=rgb)\n+    print(rgb)\n+    root.config(bg=Hex)\n+\n+    def b(e):{\n+        open('color.yml','a+t').write(f'\\nhex-color: \"{Hex}\"\\nrgb-color: ({[f'{i},' for i in rgb]})'),\n+        labelhex.config(text=f\"copied\"),\n+        labelrgb.config(text=f\"copied\"),\n+        root.update(),\n+        time.sleep(1),\n+        \n+    }\n+        \n+    root.bind('c',b)\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+</GIT_DIFF>"
        },
        {
            "CYPERX": "response=[Area(type=<AreaType.AREA: 'normal'>, content='Executing Git operations: changing directory, adding all changes, committing with a message, and pushing to the remote repository.')] execution_method=<EXECUTION_METHOD.AUTO: 'AUTO-EXECUTE'> actions=[Function(type=<ActionType.cmd: 'CMD'>, action=Action(FileNameIfTypeIsFileElseBlank='', ContentIfTypeIsFileElseCmdCommand='cd C:\\\\Users\\\\MC DESMOND\\\\dextop\\\\Gradify')), Function(type=<ActionType.cmd: 'CMD'>, action=Action(FileNameIfTypeIsFileElseBlank='', ContentIfTypeIsFileElseCmdCommand='git add .')), Function(type=<ActionType.cmd: 'CMD'>, action=Action(FileNameIfTypeIsFileElseBlank='', ContentIfTypeIsFileElseCmdCommand='git commit -m \"Updated gradify.py and gradientTk.py: Added PercentMMG method, new error classes, and modified Example function. Removed print statements from gradientTk.py. Added a test.py file.\"')), Function(type=<ActionType.cmd: 'CMD'>, action=Action(FileNameIfTypeIsFileElseBlank='', ContentIfTypeIsFileElseCmdCommand='git push'))]"
        },
        {
            "SYSTEM": "cd \"C:\\Users\\MC DESMOND\\dextop\\Gradify\\cyperx_output\""
        },
        {
            "SYSTEM": ""
        },
        {
            "SYSTEM": ""
        },
        {
            "SYSTEM": ""
        },
        {
            "SYSTEM": "cd C:\\Users\\MC DESMOND\\dextop\\Gradify"
        },
        {
            "SYSTEM": ""
        },
        {
            "SYSTEM": ""
        },
        {
            "SYSTEM": "git add ."
        },
        {
            "SYSTEM": ""
        }
    ],
    "cyperx_voice": "en-AU-WilliamNeural",
    "mpt": false,
    "width": 70,
    "cyperx_output": "C:\\Users\\MC DESMOND\\dextop\\Gradify\\cyperx_output",
    "auto_start": false
}